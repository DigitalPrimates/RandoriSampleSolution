/*Generated by SharpKit 5 v5.00.0000*/
if (typeof(randori) == "undefined")
    var randori = {};
if (typeof(randori.styles) == "undefined")
    randori.styles = {};
randori.styles.StyleBehaviorManager = function (map)
{
    this.map = null;
    this.map = map;
};
randori.styles.StyleBehaviorManager.prototype.findURLs = function (links)
{
    var link;
    var urls =  [];
    if (links != null)
    {
        for (var i = 0; i < links.length; i++)
        {
            link = links[i];
            if (link.rel == "stylesheet/randori")
            {
                link.rel = "stylesheet";
                urls.push(link.href);
            }
        }
    }
    return urls;
};
randori.styles.StyleBehaviorManager.prototype.loadSheets = function (urls)
{
    var sheetRequest = new XMLHttpRequest();
    var behaviorSheet = "";
    var url;
    var prefix;
    for (var i = 0; i < urls.length; i++)
    {
        url = urls[i];
        sheetRequest.open("GET", url, false);
        sheetRequest.send("");
        if (sheetRequest.status == 404)
        {
            alert("Cannot Find StyleSheet " + url);
        }
        var lastSlash = url.lastIndexOf("/");
        prefix = url.substring(0, lastSlash);
        this.modifyAndPersistAttributes(sheetRequest.responseText);
    }
};
randori.styles.StyleBehaviorManager.prototype.modifyAndPersistAttributes = function (sheet)
{
    var classSelector;
    var dpVendorItemsResult;
    var dpVendorItemInfoResult;
    var CSSClassSelectorNameResult;
    var allClassSelectors = new RegExp("\\.[\\w\\W]*?\\}", "g");
    var dpVendorItems = new RegExp("\\s?-randori-([\\w\\W]+?)\\s?:\\s?[\"\']?([\\w\\W]+?)[\"\']?;", "g");
    var dpVendorItemsDetail = new RegExp("\\s?-randori-([\\w\\W]+?)\\s?:\\s?[\"\']?([\\w\\W]+?)[\"\']?;");
    var classSelectorName = new RegExp("\\.([\\W\\w]+?)\\s+?{");
    var CSSClassSelectorName;
    var dpVendorItemStr;
    var selectors = sheet.match(allClassSelectors);
    if (selectors != null)
    {
        for (var i = 0; i < selectors.length; i++)
        {
            classSelector = selectors[i];
            dpVendorItemsResult = classSelector.match(dpVendorItems);
            if (dpVendorItemsResult != null)
            {
                CSSClassSelectorNameResult = classSelector.match(classSelectorName);
                CSSClassSelectorName = CSSClassSelectorNameResult[1];
                for (var j = 0; j < dpVendorItemsResult.length; j++)
                {
                    dpVendorItemStr = dpVendorItemsResult[j];
                    dpVendorItemInfoResult = dpVendorItemStr.match(dpVendorItemsDetail);
                    this.map.addBehaviorEntry(CSSClassSelectorName, dpVendorItemInfoResult[1], dpVendorItemInfoResult[2]);
                    console.log(CSSClassSelectorName + " specifies a " + dpVendorItemInfoResult[1] + " implemented by class " + dpVendorItemInfoResult[2]);
                }
            }
        }
    }
};
randori.styles.StyleBehaviorManager.prototype.parseAndReleaseNodes = function (links)
{
    var urls = this.findURLs(links);
    this.loadSheets(urls);
};
randori.styles.StyleBehaviorManager.className = "randori.styles.StyleBehaviorManager";
randori.styles.StyleBehaviorManager.injectionPoints = function (t)
{
    var p;
    switch (t)
    {
        case 0:
            p =  [];
            p.push({n:'map', t:'randori.styles.StyleBehaviorMap', r:'1'});
            break;
        case 1:
            p =  [];
            p.push({n:'map', t:'randori.styles.StyleBehaviorMap'});
            break;
        default :
            p =  [];
            break;
    }
    return p;
};
randori.styles.StyleBehaviorMap = function ()
{
    this.hashMap = null;
    this.hashMap = new Object();
};
randori.styles.StyleBehaviorMap.prototype.addBehaviorEntry = function (cssClassName, behaviorType, className)
{
    var attributes = this.hashMap[cssClassName];
    if (attributes == null)
    {
        attributes = new randori.styles.StyleBehaviorMapEntry();
        this.hashMap[cssClassName] = attributes;
    }
    attributes.addBehaviorType(behaviorType, className);
};
randori.styles.StyleBehaviorMap.prototype.hasBehaviorEntry = function (className)
{
    return (this.hashMap[className] != null);
};
randori.styles.StyleBehaviorMap.prototype.getBehaviorEntry = function (cssClassName)
{
    return this.hashMap[cssClassName];
};
randori.styles.StyleBehaviorMap.className = "randori.styles.StyleBehaviorMap";
randori.styles.StyleBehaviorMap.injectionPoints = function (t)
{
    var p;
    switch (t)
    {
        case 0:
            p =  [];
            break;
        default :
            p =  [];
            break;
    }
    return p;
};
randori.styles.StyleBehaviorMapEntry = function ()
{
    this.hashMap = null;
    this.behaviorTypes = null;
    this.hashMap = new Object();
    this.behaviorTypes =  [];
};
randori.styles.StyleBehaviorMapEntry.prototype.addBehaviorType = function (behaviorType, className)
{
    this.hashMap[behaviorType] = className;
    this.behaviorTypes.push(behaviorType);
};
randori.styles.StyleBehaviorMapEntry.prototype.hasBehaviorType = function (behaviorType)
{
    return (this.hashMap[behaviorType] != null);
};
randori.styles.StyleBehaviorMapEntry.prototype.getBehaviorClass = function (behaviorType)
{
    return this.hashMap[behaviorType];
};
randori.styles.StyleBehaviorMapEntry.prototype.clone = function ()
{
    var newEntry = new randori.styles.StyleBehaviorMapEntry();
    for (var i = 0; i < this.behaviorTypes.length; i++)
    {
        newEntry.addBehaviorType(this.behaviorTypes[i], this.hashMap[this.behaviorTypes[i]]);
    }
    return newEntry;
};
randori.styles.StyleBehaviorMapEntry.prototype.merge = function (entry)
{
    for (var i = 0; i < entry.behaviorTypes.length; i++)
    {
        this.addBehaviorType(entry.behaviorTypes[i], entry.hashMap[entry.behaviorTypes[i]]);
    }
};
randori.styles.StyleBehaviorMapEntry.className = "randori.styles.StyleBehaviorMapEntry";
randori.styles.StyleBehaviorMapEntry.injectionPoints = function (t)
{
    var p;
    switch (t)
    {
        case 0:
            p =  [];
            break;
        default :
            p =  [];
            break;
    }
    return p;
};
